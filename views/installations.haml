
#installations
  %h2 Installations
- unless @dirs_that_dont_exist.empty?
  #message-error-dirs.error.message.container
    = toggle_container("#message-error-dirs", :expanded)
    .head
      %h2.toggle.button Directories not found
    .body
      %h2.toggle.button Directories not found
      .content
        The following directories could not be found:
        %ul.vertical.list
          - @dirs_that_dont_exist.each do |dir|
            %li
              = image("folder-exists-not")
              = dir
  - @dirs_that_exist.each do |dir|
    - app = @apps[dir]
    - unless app
      %div{ :id => dom_id_for_dir(dir), :class => "container border-all app" }
        .head
          %h3
            = image("folder")
            = dir
    - else
      %div{ :id => dom_id_for_dir(dir), :class => "container border-all app #{app.basic_name}-app" }
        = toggle_container("##{dom_id_for_dir(dir)}")
        .head
          %h3.toggle.button
            = mini_logo_for(app)
            = dir
            %span.content
              %span.installed-version
                Installed:
                %span.version>= app.installed_version
              &nbsp;
              %span.newest-version
                Newest:
                %span.version> unknown
                = ajax_loader
        .body
          .logo= logo_for(app)
          %h3.toggle.button
            = image("folder")
            = dir
          .content
            %h4
              %span.name= app.app_name
            .installed-version
              Installed Version:
              %span.version= app.installed_version
            .newest-version
              Newest Version:
              %span.version
              = ajax_loader
              %a.check-version.button
                = image("version-check-newest")
                Check
            .project-links
              = link_to_app_project(app)
              - if app.project_url_for_installed_version
                = link_to_app_release(app, :installed_version)
- @detectors.each do |detector|
  :javascript
    $(document).ready(function() {
      var inst = $(".#{detector.basic_name}-app");
      var nv = $(inst).find(".newest-version");
      $(nv).find(".check-version.button").click(function() {
        $(nv).find(".version").html(""); // erase newest version text
        $(nv).find(".ajax-loader").show(); // show throbber
        $.getJSON("/apps/#{detector.basic_name}/newest_version", function(data) {
          updateNewestVersionFor(inst, data);
          updateVerdictsFor(inst);
          addNewestVersionLink(inst, data);
        });
      });
    });
:javascript
  function addNewestVersionLink(inst, data) {
    if (data.project_url_for_newest_version) {
      var links = $(inst).find(".project-links");
      var nv = $(links).find(".newest-version");
      var linkText = '#{link_to_external("#{image("link")} Newest Release", "'+data.project_url_for_newest_version+'", :class => "newest-version")}';
      if(nv.length === 0) {
        $(links).append(linkText);
      } else {
        $(nv).relace(linkText);
      }
    }
  }
  function updateNewestVersionFor(inst, data) {
    var nv = $(inst).find(".newest-version");
    $(nv).find(".ajax-loader").hide(); // hide throbber
    $(nv).find(".version").html(data.newest_version); // set newest version text
    // update button
    $(nv).find(".check-version.button").html('#{image("version-check-newest")} Recheck');
  }
  function updateVerdictsFor(inst) {
    $(inst).each(function() {
      var installed_version = $(this).find(".installed-version .version").text();
      var newest_version = $(this).find(".newest-version .version").text();

      $(this).addClass("verdict");
      if(installed_version == newest_version) {
        $(this).addClass("up-to-date");
      } else {
        $(this).addClass("outdated");
      }
    });
  }
