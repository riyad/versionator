
// From http://phpjs.org/functions/empty:392
function isEmpty(mixed_var) {
  var key;
  if (mixed_var === "" ||
    mixed_var === 0 ||
    mixed_var === "0" ||
    mixed_var === null ||
    mixed_var === false ||
    typeof mixed_var === 'undefined'
  ){
    return true;
  }
  if (typeof mixed_var == 'object') {
    for (key in mixed_var) {
      return false;
    }
    return true;
  }

  return false;
}

function titelize(text) {
  return text.substr(0,1).toUpperCase() + text.substr(1)
}



function setupCollapsableContainer(subjectSelector, initialSubjectState) {
  var subj = $(subjectSelector);
  var subjCollapsed = $(subj).find('.collapsable-collapsed');
  var subjExpanded = $(subj).find('.collapsable-expanded');
  var button = $(subj).find('.collapsable-button');
  var expand = $(subj).find('.collapsable-button-expand');
  var collapse = $(subj).find('.collapsable-button-collapse');

  $(subj).addClass("collapsable-container")
  $(button).click(function() {
    expand.toggle();
    collapse.toggle();
    subjCollapsed.slideToggle();
    subjExpanded.slideToggle();
  });

  if (initialSubjectState == "collapsed") {
    collapse.hide();
    subjExpanded.hide();
  } else {
    expand.hide();
    subjCollapsed.hide();
  }
}



// installed version

function checkAllInstalledVersions() {
  var delayBetweenRequests = 250; // in ms
  var currentDelay = 0;
  <% @directories.each do |directory| %>
    if (!isEmpty($("#<%= directory %>").toArray())) {
      setTimeout(function() {
        checkInstalledVersionForDirectory("<%= directory %>")
      }, currentDelay);
      currentDelay += delayBetweenRequests;
    }
  <% end %>
}

function checkInstalledVersionForDirectory(directory) {
  var dir = $("#"+directory);
  var app = $(dir).parents(".app");
  var iv = $(app).find($(dir).selector+" .installed-version, .outdated-installs");
  var ivt = $(iv).find(".version, .installs");
  var installedVersionUrl = "/installations/"+directory+"/installed_version.json";

  $(iv).find(".ajax-loader").show(); // show throbbers
  $(ivt).html(""); // erase installed version text
  $.getJSON(installedVersionUrl).success(function(data) {
    updateInstalledVersionFor(dir, data.installed_version);
    updateVerdicts(dir);
    addInstalledVersionLink(dir, data);
  }).error(function(xhr, error, exception) {
    console.log(xhr);
    console.log(error);
    console.log(exception);
    error = titelize(error);
    addInstalledVersionLink(dir, '<span class="message error">'+error+': '+exception+'</span>');
  });
}

<% @directories.each do |directory| %>
  $(function() {
    var dir = $("#<%= directory %>");
    var iv = $(dir).find(".installed-version");

    $(iv).find(".check-installed-version.button").click(function() {
      checkInstalledVersionForDirectory("<%= directory %>");
    });
  });
<% end %>



function updateInstalledVersionFor(dir, html) {
  var iv = $(dir).find(".installed-version");
  $(dir).parents(".app").find(".outdated-installs .ajax-loader").hide(); // hide throbber
  $(iv).find(".ajax-loader").hide(); // hide throbber
  $(iv).find(".version").html(html); // set installed version text
  // update button
  $(iv).find(".check-installed-version.button").html('<%= image("version-check-installed") %> Recheck');
}

function addInstalledVersionLink(dir, data) {
  if (data.project_url_for_installed_version) {
    var links = $(dir).find(".project-links, .dir-project-links");
    var iv = $(links).find(".installed-version");
    var linkText = '<%= link_to_external("#{image("link")} Installed Release", "'+data.project_url_for_newest_version+'", :class => "installed-version") %>';
    $(iv).replaceWith(linkText);
  }
}



// newest version

function checkAllNewestVersions() {
  var delayBetweenRequests = 250; // in ms
  var currentDelay = 0;
  <% @detectors.each do |detector| %>
    if (!isEmpty($(".<%= detector.basic_name %>-app").toArray())) {
      setTimeout(function() {
        checkNewestVersionForApplication("<%= detector.basic_name %>");
      }, currentDelay);
      currentDelay += delayBetweenRequests;
    }
  <% end %>
}

function checkNewestVersionForApplication(app) {
  var inst = $("."+app+"-app");
  var nv = $(inst).find(".newest-version, .outdated-installs");
  var nvt = $(nv).find(".version, .installs");
  var newestVersionUrl = "/applications/"+app+"/newest_version.json";

  $(nv).find(".ajax-loader").show(); // show throbber
  $(nvt).html(""); // erase newest version text
  $.getJSON(newestVersionUrl).success(function(data) {
    updateNewestVersionFor(inst, data.newest_version);
    updateVerdicts(inst);
    addNewestVersionLink(inst, data);
  }).error(function(xhr, error, exception) {
    console.log(xhr);
    console.log(error);
    console.log(exception);
    error = titelize(error);
    updateNewestVersionFor(inst, '<span class="message error">'+error+': '+exception+'</span>');
  });
}

<% @detectors.each do |detector| %>
  $(function() {
    var inst = $(".<%= detector.basic_name %>-app");
    var nv = $(inst).find(".newest-version");

    $(nv).find(".check-newest-version.button").click(function() {
      checkNewestVersionForApplication("<%= detector.basic_name %>");
    });
  });
<% end %>



function addNewestVersionLink(inst, data) {
  if (data.project_url_for_newest_version) {
    var links = $(inst).find(".project-links");
    var nv = $(links).find(".newest-version");
    var linkText = '<%= link_to_external("#{image("link")} Newest Release", "'+data.project_url_for_newest_version+'", :class => "newest-version") %>';
    $(nv).replaceWith(linkText);
  }
}

function updateNewestVersionFor(inst, html) {
  var nv = $(inst).find(".newest-version, .outdated-installs");
  $(nv).find(".ajax-loader").hide(); // hide throbber
  $(nv).find(".version, .installs").html(html); // set newest version text
  // update button
  $(nv).find(".check-newest-version.button").html('<%= image("version-check-newest") %> Recheck');
}

function updateVerdicts(inst) {
  console.log("override this"); 
}



// all versions

function checkAllVersions() {
  checkAllInstalledVersions();
  checkAllNewestVersions();
}



// hook up buttons

$(function() {
  $(".check-all-versions.button").click(checkAllVersions);
  $(".check-all-installed-versions.button").click(checkAllInstalledVersions);
  $(".check-all-newest-versions.button").click(checkAllNewestVersions);
});