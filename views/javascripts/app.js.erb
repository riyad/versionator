
// From http://phpjs.org/functions/empty:392
function isEmpty(mixed_var) {
  var key;
  if (mixed_var === "" ||
    mixed_var === 0 ||
    mixed_var === "0" ||
    mixed_var === null ||
    mixed_var === false ||
    typeof mixed_var === 'undefined'
  ){
    return true;
  }
  if (typeof mixed_var == 'object') {
    for (key in mixed_var) {
      return false;
    }
    return true;
  }

  return false;
}

function appLogo(basic_name) {
  return '<img src="images/logos/'+basic_name+'.png" alt="'+basic_name+'" />';
}

function externalLink(text, url, options) {
  if (isEmpty(options)) {
    options = {};
  }
  return '<a href="'+url+'" '+(isEmpty(options.class) ? '' : 'class="'+options.class+'"')+'>'+text+' <i class="icon-share link-external"></i></a>';
}

function miniAppLogo(basic_name) {
  return '<img src="images/logos/'+basic_name+'-mini.png" alt="'+basic_name+'" />';
}

function appProjectLink(app_name, project_url) {
  return externalLink(app_name+" Website", project_url);
}

function titelize(text) {
  return text.substr(0,1).toUpperCase() + text.substr(1);
}



// installed version

function checkAllInstalledVersions() {
  var delayBetweenRequests = 250; // in ms
  var currentDelay = 0;
  <% @directories.each do |directory| %>
    if (!isEmpty($("#<%= directory %>").toArray())) {
      setTimeout(function() {
        checkInstalledVersionForDirectory("<%= directory %>")
      }, currentDelay);
      currentDelay += delayBetweenRequests;
    }
  <% end %>
}

function checkInstalledVersionForDirectory(directory) {
  var dir = $("#"+directory);
  var installedVersionUrl = "/installations/"+directory+"/installed_version.json";

  $(dir).find(".installed-app .busy").show(); // show busy
  $(dir).find(".installed-version").html(""); // erase version + link
  $.getJSON(installedVersionUrl).success(function(data) {
    updateInstalledVersionFor(dir, data.installed_version);
    updateAssessments(dir);
    addInstalledVersionLink(dir, data);
  }).error(function(xhr, error, exception) {
    console.log(xhr);
    console.log(error);
    console.log(exception);
    error = titelize(error);
    addInstalledVersionLink(dir, '<span class="message error">'+error+': '+exception+'</span>');
  });
}

<% @directories.each do |directory| %>
  $(function() {
    var dir = $("#<%= directory %>");

    $(dir).find(".check-installed-version.btn").click(function() {
      checkInstalledVersionForDirectory("<%= directory %>");
    });
  });
<% end %>



function updateInstalledVersionFor(dir, html) {
  var ia = $(dir).find(".installed-app");
  $(ia).find(".busy").hide();
  $(ia).find(".installed-version").html(html); // set installed version text
  // update button
  $(ia).find(".check-installed-version.btn").html('<i class="icon-refresh"/> Recheck');
}

function addInstalledVersionLink(dir, data) {
  if (data.project_url_for_installed_version) {
    var ivl = $(dir).find(".installed-version-link");
    var linkText = '<%= link_to_external("Installed Release", "'+data.project_url_for_installed_version+'", :class => "installed-version") %>';
    $(ivl).html(linkText);
  }
}



// newest version

function checkAllNewestVersions() {
  var delayBetweenRequests = 250; // in ms
  var currentDelay = 0;
  <% @detectors.each do |detector| %>
    if (!isEmpty($(".<%= detector.basic_name %>-app").toArray())) {
      setTimeout(function() {
        checkNewestVersionForApplication("<%= detector.basic_name %>");
      }, currentDelay);
      currentDelay += delayBetweenRequests;
    }
  <% end %>
}

function checkNewestVersionForApplication(app) {
  var inst = $("."+app+"-app");
  var newestVersionUrl = "/applications/"+app+"/newest_version.json";

  $(inst).find(".newest-app .busy").show(); // show busy
  $(inst).find(".newest-version").html(""); // erase version + link
  $.getJSON(newestVersionUrl).success(function(data) {
    updateNewestVersionFor(inst, data.newest_version);
    updateAssessments(inst);
    addNewestVersionLink(inst, data);
  }).error(function(xhr, error, exception) {
    console.log(xhr);
    console.log(error);
    console.log(exception);
    error = titelize(error);
    updateNewestVersionFor(inst, '<span class="message error">'+error+': '+exception+'</span>');
  });
}

<% @detectors.each do |detector| %>
  $(function() {
    var inst = $(".<%= detector.basic_name %>-app");

    $(inst).find(".check-newest-version.btn").click(function() {
      checkNewestVersionForApplication("<%= detector.basic_name %>");
    });
  });
<% end %>



function addNewestVersionLink(inst, data) {
  if (data.project_url_for_newest_version) {
    var nvl = $(inst).find(".newest-version-link");
    var linkText = '<%= link_to_external("Newest Release", "'+data.project_url_for_newest_version+'", :class => "newest-version") %>';
    $(nvl).html(linkText);
  }
}

function updateNewestVersionFor(inst, html) {
  var na = $(inst).find(".newest-app");
  $(na).find(".busy").hide();
  $(na).find(".newest-version").html(html); // set newest version text
  // update button
  $(na).find(".check-newest-version.btn").html('<i class="icon-refresh"/> Recheck');
}



// all versions

function checkAllVersions() {
  checkAllInstalledVersions();
  checkAllNewestVersions();
}

function getInstallations() {
  $("h1 .busy").show();
  $("#errors").slideUp();

  $.getJSON("/installations.json").success(function(data) {
    updateErrors(data.error_dirs);
    $("h1 .busy").hide();
  }).error(function(xhr, error, exception) {
    console.log(xhr);
    console.log(error);
    console.log(exception);
    error = titelize(error);
    // FIXME: show server error
    $("h1 .busy").hide();
  });
}

function updateAssessments(inst) {
  $(inst).each(function() {
    var installed_version = $(this).find(".installed-app .installed-version").text();
    var newest_version = $(this).find(".newest-app .newest-version").text();
    var as = $(this).find(".assessment-summary");

    // reset styles
    $(this).removeClass("alert-success");
    $(this).removeClass("alert-warning");
    $(as).removeClass("btn-success");
    $(as).removeClass("btn-warning");
    $(as).html("<i class='icon-question-sign' /> Status Unknown");

    if(!isEmpty(installed_version) &&
       installed_version != "unknown" &&
       !isEmpty(newest_version) &&
       newest_version != "unknown"
    ) {
      $(this).addClass("alert");
      if(installed_version == newest_version) {
        $(this).addClass("alert-success");
        $(as).addClass("btn-success");
        $(as).html("<i class='icon-ok-sign icon-white' /> Up-to-Date");
      } else {
        $(this).addClass("alert-warning");
        $(as).addClass("btn-warning");
        $(as).html("<i class='icon-exclamation-sign icon-white' /> Needs Attention");
      }
    }
  });
}

function updateErrors(error_dirs) {
  var list = $("#error-details ul");

  // reset list
  $(list).html("");

  // list errors
  $(error_dirs).each(function() {
    $(list).append('<li><%= image("folder-exists-not") %> ' + this + '</li>');
  });

  // show errors only of there are any
  if (!isEmpty(error_dirs)) {
    $("#errors").slideDown();
  }
}



// on load

$(function() {
  // initialize collapsers
  $(".collapser").click(function() {
    $(this).toggleClass("in");
  });

  $("button#check-all-versions").click(checkAllVersions);
  $("button#refresh-installations-button").click(getInstallations);

  getInstallations();
});