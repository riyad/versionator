
// From http://phpjs.org/functions/empty:392
function isEmpty(mixed_var) {
  var key;    
  if (mixed_var === "" ||
    mixed_var === 0 ||
    mixed_var === "0" ||
    mixed_var === null ||
    mixed_var === false ||
    typeof mixed_var === 'undefined'
  ){
    return true;
  } 
  if (typeof mixed_var == 'object') {
    for (key in mixed_var) {
      return false;
    }
    return true;
  }

  return false;
}

function titelize(text) {
  return text.substr(0,1).toUpperCase() + text.substr(1)
}



function setupToggleContainer(subjectSelector, initialSubjectState) {
  var subj = $(subjectSelector);
  var subjHead = $(subj).find('.head');
  var subjBody = $(subj).find('.body');
  var button = $(subj).find('.toggle.button');
  var expand = $(subj).find('.container-expand');
  var collapse = $(subj).find('.container-collapse');

  $(button).click(function() {
    expand.toggle();
    collapse.toggle();
    subjHead.slideToggle();
    subjBody.slideToggle();
  });

  if (initialSubjectState == "collapsed") {
    collapse.hide();
    subjBody.hide();
  } else {
    expand.hide();
    subjHead.hide();
  }
}




function checkAllNewestVersions() {
  var delayBetweenRequests = 250; // in ms
  var currentDelay = 0;
  <% @detectors.each_with_index do |detector, index| %>
    if (!isEmpty($(".<%= detector.basic_name %>-app").toArray())) {
      setTimeout(checkNewestVersionFor<%= detector.basic_name.camelize %>, currentDelay);
      currentDelay += delayBetweenRequests;
    }
  <% end %>
}

<% @detectors.each do |detector| %>
  $(function() {
    var inst = $(".<%= detector.basic_name %>-app");
    var nv = $(inst).find(".newest-version");
    var nvt = $(nv).find(".version");
    var url = "/apps/<%= detector.basic_name %>/newest_version.json";

    $(nv).find(".check-newest-version.button").click(checkNewestVersionFor<%= detector.basic_name.camelize %>);
  });

  function checkNewestVersionFor<%= detector.basic_name.camelize %>() {
    var inst = $(".<%= detector.basic_name %>-app");
    var nv = $(inst).find(".newest-version, .outdated-installs");
    var nvt = $(nv).find(".version, .installs");
    var newestVersionUrl = "/applications/<%= detector.basic_name %>/newest_version.json";

    $(nv).find(".ajax-loader").show(); // show throbber
    $(nvt).html(""); // erase newest version text
    $.getJSON(newestVersionUrl).success(function(data) {
      updateNewestVersionFor(inst, data.newest_version);
      updateVerdicts(inst);
      addNewestVersionLink(inst, data);
    }).error(function(xhr, error, exception) {
      console.log(xhr);
      console.log(error);
      console.log(exception);
      error = titelize(error);
      updateNewestVersionFor(inst, '<span class="message error">'+error+': '+exception+'</span>');
    });
  }
<% end %>



function addNewestVersionLink(inst, data) {
  if (data.project_url_for_newest_version) {
    var links = $(inst).find(".project-links");
    var nv = $(links).find(".newest-version");
    var linkText = '<%= link_to_external("#{image("link")} Newest Release", "'+data.project_url_for_newest_version+'", :class => "newest-version") %>';
    if(isEmpty(nv.length)) {
      $(links).append(linkText);
    } else {
      $(nv).replaceWith(linkText);
    }
  }
}

function updateNewestVersionFor(inst, html) {
  var nv = $(inst).find(".newest-version, .outdated-installs");
  $(nv).find(".ajax-loader").hide(); // hide throbber
  $(nv).find(".version, .installs").html(html); // set newest version text
  // update button
  $(nv).find(".check-newest-version.button").html('<%= image("version-check-newest") %> Recheck');
}

function updateVerdicts(inst) {
  console.log("override this"); 
}
